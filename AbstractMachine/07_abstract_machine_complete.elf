%%-------------------------------------------
%% Plugging the expressions in the stacks
%%-------------------------------------------

plug : exp -> stack -> exp -> type.
%mode plug +E +S -E2.

plug/nil : plug E nil E.
plug/s : plug E (f-s , S) E'
	  <- plug (s E) S E'.
plug/fst : plug E (f-fst , S) E'
	    <- plug (fst E) S E'.
plug/snd : plug E (f-snd , S) E'
	    <- plug (snd E) S E'.
plug/pair1 : plug E (f-pair1 E2 , S) E'
	    <- plug (pair E E2) S E'.
plug/pair2 : plug E (f-pair2 (V : value E1) , S) E'
	      <- plug (pair E1 E) S E'.
plug/app1 : plug E (f-app1 E2 , S) E'
	     <- plug (app E E2) S E'.
plug/app2 : plug E (f-app2 (V : value F) , S) E'
	    <- plug (app F E) S E'.

%worlds () (plug _ _ _).
%total S (plug _ S _).

%% Flattenning the states into expressions

flat : state -> exp -> type.
%mode flat +S -E.

flat/ev : flat (ev E S) E'
	   <- plug E S E'.

flat/ap : flat (ap (V : value E) S) E'
	   <- plug E S E'.

%worlds () (flat _ _).
%total S (flat S _).

%%------------------------------------------
%% Lemma: result of plug is unique

plug-eq : plug E S X1 -> plug E S X2 -> id-exp X1 X2 -> type.

%mode plug-eq +P1 +P2 -EQ.

- : plug-eq plug/nil plug/nil id-exp/refl.

- : plug-eq (plug/s P1) (plug/s P2) EQ
     <- plug-eq P1 P2 EQ.

- : plug-eq (plug/fst P1) (plug/fst P2) EQ
    <- plug-eq P1 P2 EQ.

- : plug-eq (plug/snd P1) (plug/snd P2) EQ
    <- plug-eq P1 P2 EQ.

- : plug-eq (plug/pair1 P1) (plug/pair1 P2) EQ
    <- plug-eq P1 P2 EQ.

- : plug-eq (plug/pair2 P1) (plug/pair2 P2) EQ
    <- plug-eq P1 P2 EQ.

- : plug-eq (plug/app1 P1) (plug/app1 P2) EQ
    <- plug-eq P1 P2 EQ.

- : plug-eq (plug/app2 P1) (plug/app2 P2) EQ
    <- plug-eq P1 P2 EQ.

%worlds () (plug-eq _ _ _).
%total P1 (plug-eq P1 _ _).

%%-----------------------------------------
%% Eval-equivalent pairs
%%----------------------------------------

equal-fst-pair :
		  value E1
		  -> value E2
		  -> E1 == fst (pair E1 E2)
		  -> type.
%mode equal-fst-pair +V1 +V2 -EQ.

- : equal-fst-pair V1 V2 (eq EQ1 (eval/fst (eval/pair EQ2 EQ1)))
     <- eval/val V1 EQ1
     <- eval/val V2 EQ2.

%worlds () (equal-fst-pair _ _ _).
%total {} (equal-fst-pair _ _ _).

%%-----------------------------------------------

equal-snd-pair :
		  value E1
		  -> value E2
		  -> E2 == snd (pair E1 E2)
		  -> type.
%mode equal-snd-pair +V1 +V2 -EQ.

- : equal-snd-pair V1 V2 (eq EQ2 (eval/snd (eval/pair EQ2 EQ1)))
     <- eval/val V1 EQ1
     <- eval/val V2 EQ2.

%worlds () (equal-snd-pair _ _ _).
%total {} (equal-snd-pair _ _ _).

%%-----------------------------------------------

eval-plug-beta :
		  value E
		  -> plug (F E) S E1
		  -> eval E1 V
		  -> plug (app (lam F) E) S E2
		  -> eval E2 V
		  -> type.

% plug (F E) S E1
% eval E1 V
% eval (F E) V'

% plug (F E) (fst , S) = plug (fst (F E)) S E1
% 			eval (plug (fst (F E) S)) V

% E1 == E2 -> eval E1 === eval E2
		     

% %%-----------------------------------------------

% plug E S E'

% eval E V

% eval E' V'

% ev E S ===> ev V S                  ---> E ==> V

% ev E (fst :: S) ===> ev V S         ---> fst E ==> V

% ev E (snd :: S) ===> ev V S         ---> snd E ==> V

% ev E (pair1 E2 :: S) ==> ev V S      ---> pair E E2 ==> V

% ev E (pair2 V1 :: S) ==> ev V S      ---> pair V1 E ===> V

% ev E (app1 A :: S) ==> ev V S     ---> pair (E A) ===> V

% ev E (app2 F :: S) ==> ev V S     ---> pair (F E) ===> V

% ===============================

% ev (fst E) S -> ev E (fst :: S)

% ev V (fst :: S) -> ap V 

% equal-beta :
% 	      value E
% 	      -> eval (F E) V
% 	      -> F E == app (lam F) E

% %%-----------------------------------------------

% eval-plug-eq : eval E1 V2
% 		-> eval E2 V2
% 		-> plug E1 S ES1
% 		-> plug E2 S ES2
% 		-> eval ES1 V
% 		-> eval ES2 V.

%%-------------------------------------------
%
%

inv : ST1 =AM=> ST2
       -> flat ST1 E1
       -> flat ST2 E2
       -> eval E2 V
       -> eval E1 V
       -> type.

%mode inv +STEP +FLAT1 +FLAT2 +EVAL2 -EVAL1.

- : inv ev/s (flat/ev P1) (flat/ev (plug/s P2)) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

- : inv ap/s (flat/ap (plug/s P1)) (flat/ap P2) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

- : inv ev/fst (flat/ev P1) (flat/ev (plug/fst P2)) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

% %% Non-trivial case, because we contract a redex here
% %% fst (V1 V2) ---> V1

% {V1:value E1}
% {V2:value E2}
% {V3:value E5}
% {P1:plug (fst (pair E1 E2)) S1 E3}
% {P2:plug E1 S1 E4}
% {EV2:eval E4 V3}
% ====================
% {EV23:eval E3 V3}

- : inv ap/fst (flat/ap (plug/fst P1)) (flat/ap P2) EV2 EV2.

- : inv ev/snd (flat/ev P1) (flat/ev (plug/snd P2)) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

% %% Here also a redex is contracted
% %% fst (V1 V2) ---> V2
% %% - : inv (ap/snd) F1 F2 EV2 EV23.

- : inv ev/pair1 (flat/ev P1) (flat/ev (plug/pair1 P2)) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

- : inv ap/pair1 (flat/ap (plug/pair1 P1)) (flat/ev (plug/pair2 P2)) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

- : inv ap/pair2 (flat/ap (plug/pair2 P1)) (flat/ap P2) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

- : inv ev/lam (flat/ev P1) (flat/ap P2) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

- : inv ev/app1 (flat/ev P1) (flat/ev (plug/app1 P2)) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

- : inv ap/app1 (flat/ap (plug/app1 P1)) (flat/ev (plug/app2 P2)) EV EV2
     <- plug-eq P2 P1 EQ
     <- eval-equiv-arg EV EQ EV2.

%% {P1:plug (app (lam ([x:exp] X3 x)) X1) X4 X5}
%% {P2:plug (X3 X1) X4 X6}
%% {EV:eval X6 X8} {EV2:eval X5 X8}
% - : inv ap/app2 (flat/ap (plug/app2 P1)) (flat/ev P2) EV EV2.


%worlds () (inv _ _ _  _ _).
%total STEP (inv STEP _ _ _ _).

thm : {e : exp} {v : value E'}
       ev E nil =AM=> ap V nil
       -> eval E V
       -> type.

%mode thm +E +V +STEP -EV.

- : thm E (V : value E') STEP EVV
     <- eval/val V EV_V
     <- inv STEP
	(flat/ev plug/nil : flat _ E)
	(flat/ap plug/nil : flat _ E')
	EV_V
	EVV.


%worlds () (thm _ _ _ _).
%total STEP (thm _ _ STEP _).
