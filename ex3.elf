%%----------------------------

tp : type.

num : tp.
arr : tp -> tp -> tp.

%%----------------------------

exp : type.

z : exp.
s : exp -> exp.
ifz : exp -> exp -> (exp -> exp) -> exp.
fun : tp -> (exp -> exp) -> exp.
app : exp -> exp -> exp.

%%----------------------------

%% examples

e1 : exp = s z.
e2 : exp = ifz e1 z ([x] s (x)).
e3 : exp = fun num ([x] app x x).
e4 : exp = app e3 e1.

%%------------------------------

%% static semantics

of : exp -> tp -> type.

of/z : of z num.

of/s : of (s E) num <- of E num.

of/fun : of (fun T1 F) (arr T1 T2)
	  <- ({x: exp} of x T1 -> of (F x) T2).

of/app : of (app E1 E2) T2
	  <- of E2 T1
	  <- of E1 (arr T1 T2).

of/ifz : of (ifz E1 E2 E3) T
	  <- ({x: exp} of x num -> of (E3 x) T)
	  <- of E2 T
	  <- of E1 num.



%block of_block : some {T:tp} block {x:exp} {dx: of x T}.
%worlds (of_block) (of _ _).

%%------------------------------

%% dynamic semantics

val : exp -> type.

val/z : val z.
val/s : val (s E) <- val E.
val/fun : val (fun T FN).

%mode val +E.
%worlds () (val _).

%%--------------------------------

step : exp -> exp -> type.

step/app/fn : step (app E1 E2) (app E1' E2)
	       <- step E1 E1'.

step/app/arg : step (app E1 E2) (app E1 E2')
		<- val E1
		<- step E2 E2'.

step/app/beta : step (app (fun _ E1) E2) (E1 E2)
		 <- val E2.

step/s : step (s E) (s E')
	  <- step E E'.

step/ifz/arg : step (ifz E1 E2 E3) (ifz E1' E2 E3)
		<- step E1 E1'.

step/ifz/z : step (ifz z E2 E3) E2.

step/ifz/s : step (ifz (s N) E2 E3) (E3 N)
	      <- val N.

%mode step +E1 -E2.
%worlds () (step _ _).

%%--------------------------------------

%% progress theorem

prog : exp -> type.
prog/val : prog E <- val E.
prog/step : prog E <- step E E'.

%mode prog +D.
%worlds () (prog _).

%% inversion lemmas

lem-prog/suc : prog E -> prog (s E) -> type.

- : lem-prog/suc (prog/val V) (prog/val (val/s V)).
- : lem-prog/suc (prog/step S) (prog/step (step/s S)).

%mode lem-prog/suc +P1 -P2.
%worlds () (lem-prog/suc _ _).
%total {} (lem-prog/suc _ _).

lem-prog-app : of E1 (arr T1 T2) -> prog E1 -> prog E2 -> prog (app E1 E2) -> type.

- : lem-prog-app OF (prog/step S) D2 (prog/step (step/app/fn S)).
- : lem-prog-app OF (prog/val V) (prog/step S) (prog/step (step/app/arg S V)).
- : lem-prog-app OF (prog/val V1) (prog/val V2) (prog/step (step/app/beta V2)).

%mode lem-prog-app +TP +P1 +P2 -P3.
%worlds () (lem-prog-app _ _ _ _).
%total {} (lem-prog-app _ _ _ _).

lem-prog/ifz : {E2:exp}{E3:exp -> exp} of E1 num -> prog E1 -> prog (ifz E1 E2 E3) -> type.

- : lem-prog/ifz E2 E3 OF (prog/step S) (prog/step (step/ifz/arg S)).
- : lem-prog/ifz E2 E3 OF (prog/val val/z) (prog/step step/ifz/z).
- : lem-prog/ifz E2 E3 OF (prog/val (val/s V)) (prog/step (step/ifz/s V)).

%mode lem-prog/ifz +E2 +E3 +TP +P1 -P2.
%worlds () (lem-prog/ifz _ _ _ _ _).
%total {} (lem-prog/ifz _ _ _ _ _).

prog_thm : {e: exp} of e T -> prog e -> type.

prog_thm/z : prog_thm z D (prog/val val/z).

prog_thm/s : prog_thm (s E) (of/s D) D2
	      <- prog_thm E D LEM
	      <- lem-prog/suc LEM D2.

prog_thm/fun : prog_thm (fun T E) D (prog/val val/fun).

prog_thm/app : prog_thm (app E1 E2) (of/app D1 D2) D
		<- prog_thm E1 D1 D1'
		<- prog_thm E2 D2 D2'
		<- lem-prog-app D1 D1' D2' D.

prog_thm/ifz : prog_thm (ifz E1 E2 E3) (of/ifz D1 D2 D3) D
		<- prog_thm E1 D1 D1'
		<- lem-prog/ifz E2 E3 D1 D1' D.

%mode prog_thm +E +D -P.
%worlds () (prog_thm _ _ _).
%total D (prog_thm _ D _).

%%-------------------------------------------------------------------

%% Preservation theorem

prev : of E T -> step E E' -> of E' T -> type.

%mode prev +OF +STEP -OF'.

prev/app/fn :
	       prev (of/app D1 D2) (step/app/fn S1) (of/app D1' D2)
	       <- prev D1 S1 D1'.

prev/app/arg :
		prev (of/app D1 D2) (step/app/arg S2 V1) (of/app D1 D2')
		<- prev D2 S2 D2'.

prev/app/beta :
		 prev (of/app (of/fun D1) (D2: of E2 T1)) (step/app/beta V2)
		 (D1 E2 D2).

prev/s :
	  prev (of/s D) (step/s S) (of/s D')
	  <- prev D S D'.

prev/ifz/arg : prev (of/ifz D1 D2 D3) (step/ifz/arg S1) (of/ifz D1' D2 D3)
		<- prev D1 S1 D1'.

prev/ifz/z : prev (of/ifz D1 D2 D3) step/ifz/z D2.

prev/ifz/s : prev (of/ifz (of/s D1) D2 D3) (step/ifz/s N) (D3 _ D1).
		
%worlds () (prev _ _ _).
%total D (prev _ D _).
